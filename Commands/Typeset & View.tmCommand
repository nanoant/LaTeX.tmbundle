<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>bundleUUID</key>
	<string>46788DCE-6227-11D9-BFB1-000D93589AF6</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby
# encoding: UTF-8

require ENV["TM_SUPPORT_PATH"] + "/lib/tm/executor"
require ENV["TM_SUPPORT_PATH"] + "/lib/tm/save_current_document"

require ENV["TM_SUPPORT_PATH"] + "/lib/escape"
require ENV["TM_SUPPORT_PATH"] + "/lib/exit_codes"

require ENV["TM_BUNDLE_SUPPORT"] + "/lib/texstack"

require "pathname"

def link_to_error(file, num, message)
  return "&lt;p&gt;&lt;a href=\"txmt://open?url=file://#{e_url(file)}&amp;line=#{num}\"&gt;#{File.basename file}#{num.nil? ? "" : ":"+num.to_s}:&lt;/a&gt; #{message}&lt;/p&gt;"
end

TextMate.save_current_document("tex")

ENV["TM_LATEX_DEFAULT_FORMAT"] ||= ENV["TM_BUNDLE_SUPPORT"] + "/lib/tmdefault.ltx"
ENV["TM_LATEX"] ||= (`grep -c fontspec #{ENV["TM_FILEPATH"]}`.to_i &gt; 0 ? 'xelatex' : 'pdflatex')
ENV["TM_LATEX_FLAGS"] ||= nil

# we need to save the sync info *before* we call
# make_project_master_current_document or we will
# sync to a line in the project master instead of
# the current file.

current_line=ENV["TM_LINE_NUMBER"]
current_file=ENV["TM_FILEPATH"]

TextMate::Executor.make_project_master_current_document

p = Pathname(ENV["TM_FILEPATH"])
pdf = ENV["TM_FILEPATH"].gsub(/#{p.extname}$/, ".pdf")

engine = ENV["TM_LATEX"]
args = [engine, ENV["TM_LATEX_FLAGS"], ENV["TM_FILEPATH"]].compact

opts = {:verb =&gt; "Typesetting", :version_regex =&gt; /\A(.*)$\n?((?:.|\n)*)/}

highest_warning = 0
printing_an_error = false

TextMate::Executor.run(args, opts) do |line, type|
  
  if ENV.has_key?("TM_LATEX_DEBUG")
    next(nil)
  end
  
  printing_an_error = true if line =~ /^!(?!\s*==&gt;)/
  update_current_file(line) unless printing_an_error

  file = current_file() || ENV["TM_FILEPATH"]
  raise if file[0].nil?
  if not file.nil? and file[0].chr == "."
    file = ENV["TM_DIRECTORY"] + file[1..-1]
  end

  line = line.strip
  if line =~ /^!(?!\s*==&gt;)/
     link_to_error(file,line.slice(/lines? (\d+)/,1),line)
  elsif line =~ /^.*Warning: (.*)/
     highest_warning = 2 if highest_warning &lt; 2
     message = $1
     link_to_error(file,line.slice(/lines? (\d+)/,1),message)
  elsif line =~ /^((?:Und|Ov)erfull.*)/
     highest_warning = 1 if highest_warning &lt; 1
     message = $1
     link_to_error(file,line.slice(/lines? (\d+)/,1),message)    
  elsif line =~ /^l\.(\d+)(.*)/
    printing_an_error=false
    link_to_error(file,$1,$2)
  elsif line =~ /^--&gt;(.*)$/
    "&lt;h4&gt;#{$1}â€¦&lt;/h4&gt;" 
  elsif line =~ /^-+$/
    "&lt;hr/&gt;\n"
  elsif printing_an_error
    nil # returning nil lets Executor print the line
  else
    ''  # returning an empty string "" causes Executor to do nothing.
  end
end

if $?.nil? or $?.exitstatus == 0
  if File.exists?(pdf)
	Process.detach fork {
      `/usr/bin/osascript -e '
      set thePDF to "#{pdf}"
      try
        tell application "Skim"
          if (count of (documents whose path is thePDF)) = 0 then
            open thePDF
          else
            revert (documents whose path is thePDF)
          end if
          activate
          tell front document to go to TeX line #{current_line} from "#{current_file}" showing reading bar true
        end tell
      on error
        tell application "Preview"
          open thePDF
        end tell
      end try'`
    }
  end
  # sleep(5)
  TextMate::exit_discard if (ENV["TM_LATEX_WARN_LEVEL"].to_i || 0) &gt;= highest_warning
else
  TextMate::exit_show_html
end
</string>
	<key>dontFollowNewOutput</key>
	<false/>
	<key>input</key>
	<string>document</string>
	<key>keyEquivalent</key>
	<string>@r</string>
	<key>name</key>
	<string>Typeset &amp; View</string>
	<key>output</key>
	<string>showAsHTML</string>
	<key>scope</key>
	<string>text.tex,text.bibtex</string>
	<key>uuid</key>
	<string>43E6240E-619A-4FC7-A256-1B885A1360D0</string>
</dict>
</plist>
